#include <iostream>
#include <windows.h>
using namespace std;

// first task
struct Surname
{
    char* surname;
};
void FillInSurnames(Surname* students, const int size)
{
    for (int i = 0; i < size; i++)
    {
        int sizeData = 0;
        const char N = 100;
        char data[100];
        cout << "- Enter surname #" << i + 1 << ": ";
        cin >> data;
        sizeData = strlen(data) + 1;
        students[i].surname = new char[sizeData];
        strcpy_s(students[i].surname, sizeData, data);
    }
}
void PrintOutSurnames(Surname* students, const int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << "- Surname #" << i + 1 << ": ";
        cout << students[i].surname;
        cout << endl;
    }
}
void SortingSurnames(Surname* students, const int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (strcmp(students[j].surname, students[j + 1].surname) == 1)
            {
                Surname temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }
}
void ClearSurnames(Surname* students)
{
    delete[] students->surname;
}

// second task
int** CreateArray(int rows, int cols)
{
    int** arr = new int* [rows];
    for (int i = 0; i < rows; i++)
    {
        arr[i] = new int[cols] {};
    }
    return arr;
}
void Random(int** arr, int rows, int cols, int min, int max)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            arr[i][j] = rand() % (max - min + 1) + min;
        }
    }
}
void Print2D(int** arr, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
void Print1D(int* arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

int* FlatAndSorting(int** arr, int rows, int cols, int size)
{
    if (rows <= 0 || cols <= 0)
    {
        cout << "Wrong value for rows or cols!" << endl;
        cout << "Please, enter values > 0" << endl;
        return 0;
    }
    int* flatArr = new int[size];
    int index = 0;
    // перетворення 2Д масива на 1Д
    for (int i = 0; i < rows; i++)
    {
        if (arr[i] == nullptr)
        {
            cout << "Error! Row " << i << " not initialised!" << endl;
            delete[] flatArr;
            return 0;
        }
        for (int j = 0; j < cols; j++)
        {
            if (index >= size)
            {
                cout << "Error! Array overflow!" << endl;
                delete[] flatArr;
                return 0;
            }
            flatArr[index] = arr[i][j];
            index++;
        }
    }
    // сортування
    for (int i = 0; i < size - 1; i++)
    {
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (flatArr[j] > flatArr[j + 1])
            {
                int temp = flatArr[j];
                flatArr[j] = flatArr[j + 1];
                flatArr[j + 1] = temp;
            }
        }
    }
    return flatArr;
}
int* Sorting(int* arr, const int size)
{
    for (int i = 0; i < size - 1; i++)
    {
        for (int j = 0; j < size - 1 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr;
}
int* DeletingDublicates(int* flatArray, const int size, int& newSize)
{
    int* flatArrayWithoutDubl = new int[size];
    flatArrayWithoutDubl[0] = flatArray[0];
    int index = 1;
    for (int i = 1; i < size; i++)
    {
        if (flatArray[i] != flatArray[i - 1])
        {
            flatArrayWithoutDubl[index++] = flatArray[i];
        }
    }
    newSize = index;
    return flatArrayWithoutDubl;
}

int* MergeThreeFlatArrays(int* flatArray1, const int size1, int* flatArray2, const int size2,
    int* flatArray3, const int size3, int& mergedSize)
{
    if (!flatArray1 || !flatArray2 || !flatArray3 || size1 < 0 || size2 < 0 || size3 < 0)
    {
        mergedSize = 0;
        return nullptr;
    }
    mergedSize = size1 + size2 + size3;
    int* mergedArray = new int[mergedSize];
    int index = 0;
    for (int i = 0; i < size1 && index < mergedSize; i++)
    {
        mergedArray[index++] = flatArray1[i];
    }
    for (int i = 0; i < size2 && index < mergedSize; i++)
    {
        mergedArray[index++] = flatArray2[i];
    }
    for (int i = 0; i < size3 && index < mergedSize; i++)
    {
        mergedArray[index++] = flatArray3[i];
    }
    return mergedArray;
}

int CommonSizeForTwoArrays(int* flatArrayWithoutDubl1, int newSize1,
    int* flatArrayWithoutDubl2, int newSize2)
{
    int commonSize = 0;
    int i = 0, j = 0;
    while (i < newSize1 && j < newSize2)
    {
        if (flatArrayWithoutDubl1[i] < flatArrayWithoutDubl2[j])
        {
            i++;
        }
        else if (flatArrayWithoutDubl1[i] > flatArrayWithoutDubl2[j])
        {
            j++;
        }
        else
        {
            commonSize++;
            i++;
            j++;
        }
    }
    return commonSize;
}
int* CommonElementsForTwoArrays(int* flatArrayWithoutDubl1, int newSize1,
    int* flatArrayWithoutDubl2, int newSize2, int commonSize)
{
    if (commonSize == 0)
    {
        return nullptr;
    }
    int* commonArray = new int[commonSize];
    int i = 0, j = 0, k = 0;
    while (i < newSize1 && j < newSize2 && k < commonSize)
    {
        if (flatArrayWithoutDubl1[i] < flatArrayWithoutDubl2[j]) {
            i++;
        }
        else if (flatArrayWithoutDubl1[i] > flatArrayWithoutDubl2[j])
        {
            j++;
        }
        else
        {
            commonArray[k++] = flatArrayWithoutDubl1[i];
            i++;
            j++;
        }
    }
    return commonArray;
}

void Delete(int** arr, int rows, int cols)
{
    for (int i = 0; i < rows; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}


int main()
{
    cout << "FIRST TASK" << endl;
    int size;
    cout << "Enter the desired number of students: ";
    cin >> size;
    Surname* students = new Surname[size];
    cout << endl;

    cout << "Filling in surnames..." << endl;
    FillInSurnames(students, size);
    cout << endl;

    cout << "Surnames" << endl;
    PrintOutSurnames(students, size);
    cout << endl;

    cout << "Surnames sorted alpyabetically" << endl;
    SortingSurnames(students, size);
    PrintOutSurnames(students, size);
    cout << endl;

    for (int i = 0; i < size; i++)
    {
     ClearSurnames(&students[i]);
    }
    delete[] students;
    cout << endl;

    cout << "SECOND TASK" << endl;
    int rows1, cols1;
    cout << "- Enter #1 values for rows and cols: " << endl;
    cout << "Rows: ";
    cin >> rows1;
    cout << "Cols: ";
    cin >> cols1;
    int** arr1 = CreateArray(rows1, cols1);
    int rows2, cols2;
    cout << "- Enter #2 values for rows and cols: " << endl;
    cout << "Rows: ";
    cin >> rows2;
    cout << "Cols: ";
    cin >> cols2;
    int** arr2 = CreateArray(rows2, cols2);
    int rows3, cols3;
    cout << "- Enter #3 values for rows and cols: " << endl;
    cout << "Rows: ";
    cin >> rows3;
    cout << "Cols: ";
    cin >> cols3;
    int** arr3 = CreateArray(rows3, cols3);
    cout << endl;

    srand(time(0));
    int min = -5, max = 9;
    Random(arr1, rows1, cols1, min, max);
    Random(arr2, rows2, cols2, min, max);
    Random(arr3, rows3, cols3, min, max);

    cout << "- Array A" << endl;
    Print2D(arr1, rows1, cols1);
    cout << "- Array B" << endl;
    Print2D(arr2, rows2, cols2);
    cout << "- Array C" << endl;
    Print2D(arr3, rows3, cols3);

    // модифікація 2Д масисів
    int size1 = rows1 * cols1;
    int* flatArray1 = FlatAndSorting(arr1, rows1, cols1, size1);
    int newSize1;
    int* flatArrayWithoutDubl1 = DeletingDublicates(flatArray1, size1, newSize1);

    int size2 = rows2 * cols2;
    int* flatArray2 = FlatAndSorting(arr2, rows2, cols2, size2);
    int newSize2;
    int* flatArrayWithoutDubl2 = DeletingDublicates(flatArray2, size2, newSize2);

    int size3 = rows3 * cols3;
    int* flatArray3 = FlatAndSorting(arr3, rows3, cols3, size3);
    int newSize3;
    int* flatArrayWithoutDubl3 = DeletingDublicates(flatArray3, size3, newSize3);

    /*int mergedSize;
    int* mergedArray = MergeThreeFlatArrays(flatArray1, newSize1, flatArray2, newSize2,
        flatArray3, newSize3, mergedSize);
    Sorting(mergedArray, mergedSize);
    int newMergedSize;
    int* mergedArrayWithoutDubl = DeletingDublicates(mergedArray, mergedSize, newMergedSize);
    Print1D(mergedArrayWithoutDubl, newMergedSize);*/

    cout <<  "Points" << endl;
    // first point
    int intermediateSize = CommonSizeForTwoArrays(flatArrayWithoutDubl1, newSize1,
        flatArrayWithoutDubl2, newSize2);
    int* intermediateArray = CommonElementsForTwoArrays(flatArrayWithoutDubl1, newSize1,
        flatArrayWithoutDubl2, newSize2, intermediateSize);
    int commonSize = CommonSizeForTwoArrays(intermediateArray, intermediateSize,
        flatArrayWithoutDubl3, newSize3);
    int* commonArray = CommonElementsForTwoArrays(intermediateArray, intermediateSize,
        flatArrayWithoutDubl3, newSize3, commonSize);
    cout << "Common values (A, B and C): ";
    Print1D(commonArray, commonSize);
    cout << endl;

    // third point
    int commonSizeAC = CommonSizeForTwoArrays(flatArrayWithoutDubl1, newSize1,
        flatArrayWithoutDubl3, newSize3);
    int* commonArrayAC = CommonElementsForTwoArrays(flatArrayWithoutDubl1, newSize1,
        flatArrayWithoutDubl3, newSize3, commonSizeAC);
    cout << "Common values (A and C): ";
    Print1D(commonArrayAC, commonSizeAC);
    cout << endl;


    Delete(arr1, rows1, cols1);
    Delete(arr2, rows2, cols2);
    Delete(arr3, rows3, cols3);
    delete[] flatArray1;
    delete[] flatArray2;
    delete[] flatArray3;
    delete[] flatArrayWithoutDubl1;
    delete[] flatArrayWithoutDubl2;
    delete[] flatArrayWithoutDubl3;
    delete[] intermediateArray;
    delete[] commonArray;
    delete[] commonArrayAC;
    return 0;
}
