#include <iostream>
using namespace std;

int** CreateArray(int rows, int cols)
{
	int** arr = new int* [rows];
	for (int i = 0; i < rows; i++)
	{
		arr[i] = new int[cols] {};
	}
	return arr;
}
void Random(int** arr, int rows, int cols, int min, int max)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			if (arr[i][j] == 0)
			{
				arr[i][j] = rand() % (max - min + 1) + min;
			}
		}
	}
}
void Print(int** arr, int rows, int cols)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}
void Delete(int** arr, int rows, int cols)
{
	for (int i = 0; i < rows; i++)
	{
		delete[] arr[i];
	}
	delete[] arr;
}
int** AddRow(int** arr, int rows, int cols)
{
	int** newArr = new int* [rows + 1];
	for (int i = 0; i < rows; i++)
	{
		newArr[i] = new int[cols] {};
		for (int j = 0; j < cols; j++)
		{
			newArr[i][j] = arr[i][j];
		}
	}
	newArr[rows] = new int[cols] {};
	return newArr;
}
int** DeleteRow(int** arr, int rows, int cols)
{
	int** newArr = new int* [rows - 1];
	for (int i = 0; i < rows - 1; i++)
	{
		newArr[i] = new int[cols] {};
		for (int j = 0; j < cols; j++)
		{
			newArr[i][j] = arr[i][j];
		}
	}
	return newArr;
}
int** NewRow(int** arr, int rows, int cols, int position)
{
	if (position < 0)
	{
		position = 0;
	}
	if (position > rows)
	{
		position = rows;
	}
	int** newArr = new int* [rows + 1];
	for (int i = 0, k = 0; i < rows + 1; i++)
	{
		newArr[i] = new int[cols];
		if (i == position)
		{
			for (int j = 0; j < cols; j++)
			{
				newArr[i][j] = 0;
			}
		}
		else
		{
			for (int j = 0; j < cols; j++)
			{
				newArr[i][j] = arr[k][j];
			}
			k++;
		}
	}
	return newArr;
}
int** DeleteRow(int** arr, int rows, int cols, int position)
{
	if (position < 0)
	{
		position = 0;
	}
	if (position >= rows)
	{
		position = rows - 1;
	}
	int** newArr = new int* [rows - 1];
	for (int i = 0, k = 0; i < rows; i++)
	{
		if (i == position)
		{
			continue;
		}
		newArr[k] = new int[cols];
		for (int j = 0; j < cols; j++)
		{
			newArr[k][j] = arr[i][j];
		}
		k++;
	}
	return newArr;
}

int main()
{
	srand(time(0));
	int min = 1, max = 10;
	cout << "FIRST TASK" << endl;
	int rows1, cols1;
	cout << "-----------" << endl;
	cout << "Rows: ";
	cin >> rows1;
	cout << "Cols: ";
	cin >> cols1;
	cout << "----------" << endl;
	int** arr1 = CreateArray(rows1, cols1);
	Random(arr1, rows1, cols1, min, max);
	cout << "ARRAY" << endl;
	Print(arr1, rows1, cols1);
	int** newArr1 = AddRow(arr1, rows1, cols1);
	Random(newArr1, rows1 + 1, cols1, min, max);
	cout << "NEW ARRAY" << endl;
	Print(newArr1, rows1 + 1, cols1);
	Delete(arr1, rows1, cols1);
	Delete(newArr1, rows1 + 1, cols1);
	cout << endl << endl;

	cout << "SECOND TASK" << endl;
	int rows2, cols2;
	cout << "----------" << endl;
	cout << "Rows: ";
	cin >> rows2;
	cout << "Cols: ";
	cin >> cols2;
	cout << "----------" << endl;
	int** arr2 = CreateArray(rows2, cols2);
	Random(arr2, rows2, cols2, min, max);
	cout << "ARRAY" << endl;
	Print(arr2, rows2, cols2);
	int** newArr2 = DeleteRow(arr2, rows2, cols2);
	Random(newArr2, rows2 - 1, cols2, min, max);
	cout << "NEW ARRAY" << endl;
	Print(newArr2, rows2 - 1, cols2);
	Delete(arr2, rows2, cols2);
	Delete(newArr2, rows2 - 1, cols2);
	cout << endl << endl;


	cout << "THIRD TASK" << endl;
	int rows3, cols3;
	cout << "----------" << endl;
	cout << "Rows: ";
	cin >> rows3;
	cout << "Cols: ";
	cin >> cols3;
	cout << "----------" << endl;
	int** arr3 = CreateArray(rows3, cols3);
	Random(arr3, rows3, cols3, min, max);
	cout << "ARRAY" << endl;
	Print(arr3, rows3, cols3);
	int position3;
	cout << "Choose position (0 to " << rows3 << "): ";
	cin >> position3;
	int** newRow = NewRow(arr3, rows3, cols3, position3);
	Random(newRow, rows3 + 1, cols3, min, max);
	cout << "NEW ARRAY" << endl;
	Print(newRow, rows3 + 1, cols3);
	Delete(newRow, rows3 + 1, cols3);

	cout << "FOURTH TASK" << endl;
	int rows4, cols4;
	cout << "----------" << endl;
	cout << "Rows: ";
	cin >> rows4;
	cout << "Cols: ";
	cin >> cols4;
	cout << "----------" << endl;
	int** arr4 = CreateArray(rows4, cols4);
	Random(arr4, rows4, cols4, min, max);
	cout << "ARRAY" << endl;
	Print(arr4, rows4, cols4);
	int position4;
	cout << "Choose position (0 to " << rows4 << "): ";
	cin >> position4;
	int** deleteRow = DeleteRow(arr4, rows4, cols4, position4);
	Random(deleteRow, rows4 - 1, cols4, min, max);
	cout << "NEW ARRAY" << endl;
	Print(deleteRow, rows4 - 1, cols4);
	Delete(deleteRow, rows4 - 1, cols4);
	return 0;
}
