#include <iostream>
#include <windows.h>
using namespace std;

int* DynamicArray(const unsigned int size)
{
	return new int[size];
}
void ArrayInitialisation(const unsigned int size, int* arr)
{
	for (int i = 0; i < size; i++)
	{
		cin >> *(arr + i);
	}
}
void Random(const unsigned int size, int* arr, int min, int max)
{
	for (int i = 0; i < size; i++)
	{
		*(arr + i) = rand() % (max - min + 1) + min;
	}
}

template<typename T>
void ArrayPrint(const unsigned int size, T* arr)
{
	for (int i = 0; i < size; i++)
	{
		cout << *(arr + i) << " ";
	}
	cout << endl;
}

int* DeleteElement(const unsigned int size, int* arr, int& sizeAfterDelete)
{
	int newSize = 0;
	for (int i = 0; i < size; i++)
	{
		if (*(arr + i) < 100)
		{
			newSize++;
		}
	}
	sizeAfterDelete = newSize;
	if (newSize == 0)
	{
		return nullptr;
	}
	int* newArr = new int[newSize];
	int j = 0;
	for (int i = 0; i < size; i++)
	{
		if (*(arr + i) < 100)
		{
			*(newArr + j) = *(arr + i);
			j++;
		}
	}
	return newArr;

}
int* DeleteByIndex(const unsigned int size, int* arr, int& sizeIndex, int index)
{
	int* newArr = new int[sizeIndex];
	int j = 0;
	for (int i = 0; i < size; i++)
	{
		if (i == index)
		{
			continue;
		}
		*(newArr + j) = *(arr + i);
		j++;
	}
	return newArr;
}
int SumOfTheElements(const unsigned int size, int* arr, int sum)
{
	for (int i = 0; i < size; i++)
	{
		 sum += *(arr + i);
	}
	return sum;
}
double* MulOrDiv(const unsigned int size, int* arr, int sum)
{
	double* newArr = new double[size];
	for (int i = 0; i < size; i++)
	{
		if (sum > 100)
		{
			*(newArr + i) = *(arr + i) * 10;
		}
		else
		{
			*(newArr + i) = *(arr + i) / 10.0;
		}
	}

	return newArr;
}

int main()
{
	cout << "FIRST TASK" << endl;
	int size1;
	cout << "Size: ";
	cin >> size1;
	int* arr1 = DynamicArray(size1);
	cout << "Enter array elements: " << endl;
	ArrayInitialisation(size1, arr1);
	cout << "Array: ";
	ArrayPrint<int>(size1, arr1);
	int sizeAfterDelete = 0;
	int* arrAfterDelete = DeleteElement(size1, arr1, sizeAfterDelete);
	cout << "Renewed array: ";
	if (sizeAfterDelete > 0)
	{
		ArrayPrint<int>(sizeAfterDelete, arrAfterDelete);
	}
	else if (sizeAfterDelete == 0)
	{
		cout << endl << "All elements of the array are greater that 100 :(";
		cout << endl << endl;
	}
	cout << endl;
	delete[] arr1;
	delete[] arrAfterDelete;

	cout << "SECOND TASK" << endl;
	srand(time(0));
	int min = -20, max = 20;
	int size2;
	cout << "Size: ";
	cin >> size2;
	int* arr2 = DynamicArray(size2);
	Random(size2, arr2, min, max);
	cout << "Array: ";
	ArrayPrint<int>(size2, arr2);
	int index;
	cout << "Index: ";
	cin >> index;
	while (index < 0 || index >= size2 - 1)
	{
		cout << "Invalid index! Please, choose an index from the range of 0 and " << size2 << endl;
		cout << "Index: ";
		cin >> index;
	}
	int sizeIndex = size2 - 1;
	int* arrIndex = DeleteByIndex(size2, arr2, sizeIndex, index);
	cout << "Renewed array: ";
	ArrayPrint<int>(sizeIndex, arrIndex);
	cout << endl;
	delete[] arr2;
	delete[] arrIndex;

	cout << "THIRD TASK" << endl;
	int size3;
	cout << "Size: ";
	cin >> size3;
	int* arr3 = DynamicArray(size3);
	Random(size3, arr3, min, max);
	cout << "Array: ";
	ArrayPrint<int>(size3, arr3);
	int sum = 0;
	sum = SumOfTheElements(size3, arr3, sum);
	cout << "Sum: " << sum << endl;
	double* arrMulOrDiv = MulOrDiv(size3, arr3, sum);
	cout << "Renewed array: ";
	ArrayPrint<double>(size3, arrMulOrDiv);
	delete[] arr3;
	delete[] arrMulOrDiv;
	return 0;
}
