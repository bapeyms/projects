#include <iostream>
#include <windows.h>
using namespace std;

// first task
double sum(double a, double b)
{
	return a + b;
}
double difference(double a, double b)
{
	return a - b;
}
double product(double a, double b)
{
	return a * b;
}
double quotient(double a, double b)
{
	if (b != 0)
	{
		return a / b;
	}
	else
	{
		return 0;
	}
}

// second task
int* DynamicArray(const unsigned int size)
{
	return new int[size];
}
void InitialiseArray(const unsigned int size, int* arr, int min, int max)
{
	for (int i = 0; i < size; i++)
	{
		*(arr + i) = rand() % (max - min + 1) + min;
	}
}
void PrintArray(const unsigned int size, int* arr)
{
	for (int i = 0; i < size; i++)
	{
		cout << *(arr + i) << " ";
	}
	cout << endl;
}
int* Sum(const unsigned int size, int* arrA, int* arrB, int* arrC)
{
	for (int i = 0; i < size; i++)
	{
		*(arrC + i) = *(arrA + i) + *(arrB + i);
	}
	return arrC;
}

int main()
{
	cout << "FIRST TASK" << endl;
	cout << "CALCULATOR" << endl;
	cout << "----------" << endl;
	cout << "-- MENU --" << endl;
	cout << "+ is 1" << endl;
	cout << "- is 2" << endl;
	cout << "* is 3" << endl;
	cout << "/ is 4" << endl;
	cout << "exit is 0" << endl;
	cout << "----------" << endl;

	const int SIZE = 4;
	double(*calc[SIZE])(double, double) = { sum, difference, product,quotient };
	double n1_result, n2;
	int operation;
	cout << "First number: ";
	cin >> n1_result;
	while (true)
	{
		cout << "Operation: ";
		cin >> operation;
		if (operation == 0)
		{
			break;
		}
		else if (operation < 1 || operation > 4)
		{
			cout << "Invalid operation! Please, choose an operation from the range of 0 and 4" << endl;
			continue;
		}
		cout << "Next number: ";
		cin >> n2;
		n1_result = calc[operation - 1](n1_result, n2);
		cout << "Result: " << n1_result << endl;
	}
	cout << "Final result: " << n1_result << endl << endl;

	cout << "SECOND TASK" << endl;
	srand(time(0));
	int min = 1, max = 10;
	int size;
	cout << "Size: ";
	cin >> size;
	int* arrA = DynamicArray(size);
	InitialiseArray(size, arrA, min, max);
	cout << "Array A: ";
	PrintArray(size, arrA);
	int* arrB = DynamicArray(size);
	InitialiseArray(size, arrB, min, max);
	cout << "Array B: ";
	PrintArray(size, arrB);
	int* arrC = DynamicArray(size);
	arrC = Sum(size, arrA, arrB, arrC);
	cout << "Array C (A + B): ";
	PrintArray(size, arrC);
	return 0;
}
